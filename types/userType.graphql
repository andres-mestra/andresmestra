type User {
  id: Int!
  username: String!
  email: String!
  avatar: String
  jobTitle: String
  slug: String!
  role: Role!
  createdAt: String
  posts(pagposts: simplePagInput): [Post!]
}

enum Role {
  USER
  EDITOR
  ADMIN
}

input UserFindInput {
  id: Int
  email: String
}

type Query {
  me: User
  findUser(where: UserFindInput!): User
  allUsers(paginate: principalPagInput): [User]
}

type UserRes {
  user: User
  token: String
}

input UserInput {
  username: String!
  email: String!
  password: String!
  jobTitle: String
  slug: String!
  role: Role
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  jobTitle: String
  role: Role
}

type Mutation {
  createUser(input: UserInput): UserRes
  updateUser(id: Int!, input: UserUpdateInput!): User
  deleteUser(id: Int!): Boolean
}
